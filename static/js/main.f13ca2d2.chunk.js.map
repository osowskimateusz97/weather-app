{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","onChange","change","placeholder","value","type","Result","weather","error","date","sunrise","sunset","temp","wind","pressure","city","timezone","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","APIKEY","App","state","handleChange","e","setState","target","handleSubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","prevState","sys","main","speed","catch","err","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f13ca2d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.submit}>\r\n\t\t\t<input onChange={props.change} placeholder=\"Wpisz miasto\" value={props.value} type=\"text\" />\r\n\t\t\t<button>Wyszukaj miasta</button>\r\n\t\t</form>\r\n\t);\r\n};\r\nexport default Form;\r\n","import React from 'react';\r\nimport './Result.css';\r\nconst Result = (props) => {\r\n\t//destrukturyzacja\r\n\tconst { error, date, sunrise, value, sunset, temp, wind, pressure, city, timezone, weather } = props.weather;\r\n\tlet content = null;\r\n\r\n\tif (!error && city) {\r\n\t\tconst sunriseTime = new Date((sunrise + timezone - 3600) * 1000).toLocaleTimeString();\r\n\t\tconst sunsetTime = new Date((sunset + timezone - 3600) * 1000).toLocaleTimeString();\r\n\t\tcontent = (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h1 className=\"city\">{city}</h1>\r\n\t\t\t\t<div className={'wrapperContent'}>\r\n\t\t\t\t\t<div className={'photoContainer'}>\r\n\t\t\t\t\t\t<div className={`${weather}`} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={'text'}>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tDane dla dnia i godziny: <span>{date}</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tAktualna temperatura: <span>{temp}&#176;C</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tWschód słońca: <span>{sunriseTime}</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tZachód słońca: <span>{sunsetTime}</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tAktualna siła wiatru: <span>{wind}m/s</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tAktualne ciśnienie: <span>{pressure}hPa</span>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"result\">{error ? `Nie mamy w bazie ${city}` : content}</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\nexport default Result;\r\n","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result';\nconst APIKEY = '4af14da77c0facb992d304766fcd1622';\nclass App extends React.Component {\n\tstate = {\n\t\terror: false,\n\t\tdate: '',\n\t\tsunrise: '',\n\t\tvalue: '',\n\t\tsunset: '',\n\t\ttemp: '',\n\t\twind: '',\n\t\tpressure: '',\n\t\tcity: '',\n\t\ttimezone: '',\n\t\tweather: ''\n\t};\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tvalue: e.target.value\n\t\t});\n\t};\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tconst API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state\n\t\t\t.value}&APPID=${APIKEY}&units=metric`;\n\n\t\tfetch(API)\n\t\t\t.then((response) => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\treturn response;\n\t\t\t\t}\n\t\t\t\tthrow Error('Nie udało się');\n\t\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tconst time = new Date().toLocaleString();\n\n\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\terror: false,\n\t\t\t\t\tdate: time,\n\t\t\t\t\tcity: prevState.value,\n\t\t\t\t\tsunrise: data.sys.sunrise,\n\t\t\t\t\tsunset: data.sys.sunset,\n\t\t\t\t\ttemp: data.main.temp,\n\t\t\t\t\twind: data.wind.speed,\n\t\t\t\t\tpressure: data.main.pressure,\n\t\t\t\t\ttimezone: data.timezone,\n\t\t\t\t\tvalue: '',\n\t\t\t\t\tweather: data.weather[0].main\n\t\t\t\t}));\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\terror: true,\n\t\t\t\t\tcity: prevState.value\n\t\t\t\t}));\n\t\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<Form submit={this.handleSubmit} change={this.handleChange} value={this.state.value} />\n\t\t\t\t\t<Result weather={this.state} error={this.state.error} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}